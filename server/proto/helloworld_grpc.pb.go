// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: helloworld.proto

package helloService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloServerClient is the client API for HelloServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloServerClient interface {
	Say(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRep, error)
	SayStream(ctx context.Context, opts ...grpc.CallOption) (HelloServer_SayStreamClient, error)
	SayStreamServer(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (HelloServer_SayStreamServerClient, error)
	SayDoubleStream(ctx context.Context, opts ...grpc.CallOption) (HelloServer_SayDoubleStreamClient, error)
}

type helloServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServerClient(cc grpc.ClientConnInterface) HelloServerClient {
	return &helloServerClient{cc}
}

func (c *helloServerClient) Say(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRep, error) {
	out := new(HelloRep)
	err := c.cc.Invoke(ctx, "/HelloServer/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServerClient) SayStream(ctx context.Context, opts ...grpc.CallOption) (HelloServer_SayStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloServer_ServiceDesc.Streams[0], "/HelloServer/SayStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerSayStreamClient{stream}
	return x, nil
}

type HelloServer_SayStreamClient interface {
	Send(*HelloReq) error
	CloseAndRecv() (*HelloRep, error)
	grpc.ClientStream
}

type helloServerSayStreamClient struct {
	grpc.ClientStream
}

func (x *helloServerSayStreamClient) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServerSayStreamClient) CloseAndRecv() (*HelloRep, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloRep)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServerClient) SayStreamServer(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (HelloServer_SayStreamServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloServer_ServiceDesc.Streams[1], "/HelloServer/SayStreamServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerSayStreamServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloServer_SayStreamServerClient interface {
	Recv() (*HelloRep, error)
	grpc.ClientStream
}

type helloServerSayStreamServerClient struct {
	grpc.ClientStream
}

func (x *helloServerSayStreamServerClient) Recv() (*HelloRep, error) {
	m := new(HelloRep)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServerClient) SayDoubleStream(ctx context.Context, opts ...grpc.CallOption) (HelloServer_SayDoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloServer_ServiceDesc.Streams[2], "/HelloServer/SayDoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerSayDoubleStreamClient{stream}
	return x, nil
}

type HelloServer_SayDoubleStreamClient interface {
	Send(*HelloReq) error
	Recv() (*HelloRep, error)
	grpc.ClientStream
}

type helloServerSayDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *helloServerSayDoubleStreamClient) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServerSayDoubleStreamClient) Recv() (*HelloRep, error) {
	m := new(HelloRep)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServerServer is the server API for HelloServer service.
// All implementations must embed UnimplementedHelloServerServer
// for forward compatibility
type HelloServerServer interface {
	Say(context.Context, *HelloReq) (*HelloRep, error)
	SayStream(HelloServer_SayStreamServer) error
	SayStreamServer(*HelloReq, HelloServer_SayStreamServerServer) error
	SayDoubleStream(HelloServer_SayDoubleStreamServer) error
	mustEmbedUnimplementedHelloServerServer()
}

// UnimplementedHelloServerServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServerServer struct {
}

func (UnimplementedHelloServerServer) Say(context.Context, *HelloReq) (*HelloRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}
func (UnimplementedHelloServerServer) SayStream(HelloServer_SayStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayStream not implemented")
}
func (UnimplementedHelloServerServer) SayStreamServer(*HelloReq, HelloServer_SayStreamServerServer) error {
	return status.Errorf(codes.Unimplemented, "method SayStreamServer not implemented")
}
func (UnimplementedHelloServerServer) SayDoubleStream(HelloServer_SayDoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayDoubleStream not implemented")
}
func (UnimplementedHelloServerServer) mustEmbedUnimplementedHelloServerServer() {}

// UnsafeHelloServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServerServer will
// result in compilation errors.
type UnsafeHelloServerServer interface {
	mustEmbedUnimplementedHelloServerServer()
}

func RegisterHelloServerServer(s grpc.ServiceRegistrar, srv HelloServerServer) {
	s.RegisterService(&HelloServer_ServiceDesc, srv)
}

func _HelloServer_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServerServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HelloServer/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServerServer).Say(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloServer_SayStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServerServer).SayStream(&helloServerSayStreamServer{stream})
}

type HelloServer_SayStreamServer interface {
	SendAndClose(*HelloRep) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type helloServerSayStreamServer struct {
	grpc.ServerStream
}

func (x *helloServerSayStreamServer) SendAndClose(m *HelloRep) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServerSayStreamServer) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloServer_SayStreamServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServerServer).SayStreamServer(m, &helloServerSayStreamServerServer{stream})
}

type HelloServer_SayStreamServerServer interface {
	Send(*HelloRep) error
	grpc.ServerStream
}

type helloServerSayStreamServerServer struct {
	grpc.ServerStream
}

func (x *helloServerSayStreamServerServer) Send(m *HelloRep) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloServer_SayDoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServerServer).SayDoubleStream(&helloServerSayDoubleStreamServer{stream})
}

type HelloServer_SayDoubleStreamServer interface {
	Send(*HelloRep) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type helloServerSayDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *helloServerSayDoubleStreamServer) Send(m *HelloRep) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServerSayDoubleStreamServer) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer_ServiceDesc is the grpc.ServiceDesc for HelloServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HelloServer",
	HandlerType: (*HelloServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _HelloServer_Say_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayStream",
			Handler:       _HelloServer_SayStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayStreamServer",
			Handler:       _HelloServer_SayStreamServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayDoubleStream",
			Handler:       _HelloServer_SayDoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}
